# UmaSimCraft 프로젝트 코딩 규칙

## 프로젝트 개요

- **프로젝트명**: UmaSimCraft (우마무스메 육성 시뮬레이터)
- **기술 스택**: Django 5.2.4 LTS + Channels 4 + Tailwind CSS + MariaDB 11 + Redis 7
- **목적**: 오프라인 환경에서 우마무스메 육성 시뮬레이션 및 최적화 추천

## 코딩 스타일

### Python

- **Python 버전**: 3.13 사용 (Django 5.2 요구사항)
- **포맷팅**: Black 24.x 스타일 적용
- **린팅**: Ruff 사용 (isort, flake8 대체)
- **타입 힌트**: 모든 함수에 타입 힌트 필수
- **문서화**: NumPy 스타일 docstring 사용

### Django

- **Django 버전**: 5.2.4 LTS (2028년까지 지원)
- **앱 구조**: apps/ 디렉토리 하위에 모듈화
- **모델**: composite primary key 활용 (Django 5.2 기능)
- **API**: Django REST Framework 사용
- **실시간**: Channels 4 + Redis 사용

### 프론트엔드

- **CSS**: Tailwind CSS v3 + daisyUI
- **빌드**: django-tailwind CLI 사용
- **PWA**: Service Worker로 오프라인 지원
- **반응형**: 모바일 우선 설계

## 파일 구조 규칙

```
umasimcraft/
├── project/           # Django settings, asgi.py
├── apps/
│   ├── simulator/     # 시뮬레이션 엔진
│   ├── api/          # DRF ViewSets
│   └── realtime/     # Channels Consumers
├── theme/            # Tailwind + daisyUI
├── static/img/       # 일러스트 캐시
├── scripts/          # 유틸리티 스크립트
└── docs/             # 프로젝트 문서
```

## 네이밍 컨벤션

- **클래스**: PascalCase (예: `UmaSimulator`)
- **함수/변수**: snake_case (예: `calculate_stats`)
- **상수**: UPPER_SNAKE_CASE (예: `MAX_TRAINING_TURNS`)
- **파일명**: snake_case (예: `simulation_engine.py`)

## 커밋 메시지

Conventional Commits 형식 사용:

- `feat:` 새로운 기능
- `fix:` 버그 수정
- `docs:` 문서 수정
- `style:` 코드 포맷팅
- `refactor:` 코드 리팩토링
- `test:` 테스트 추가/수정
- `chore:` 빌드 프로세스 또는 보조 도구 변경

## 보안 규칙

- 민감한 정보는 환경변수 사용
- SQL 인젝션 방지를 위한 ORM 사용
- CSRF 토큰 필수 적용
- 입력값 검증 및 sanitization

## 성능 고려사항

- Redis 캐싱 활용
- 데이터베이스 쿼리 최적화
- 정적 파일 압축 및 CDN 활용
- 이미지 최적화 (WebP 포맷 사용)

## 테스트 규칙

- 단위 테스트 필수 (pytest 사용)
- 통합 테스트 작성
- Channels WebSocket 테스트 포함
- 테스트 커버리지 70% 이상 유지

## 문서화

- README.md는 한글로 작성
- 코드 주석은 영어로 작성
- API 문서는 자동 생성 (DRF)
- 변경사항은 CHANGELOG.md에 기록

## Atomic Design Methodology (Django Templates)

### 개요

Django 템플릿 개발 시 Atomic Design Methodology를 필수로 적용하여 일관성 있고 재사용 가능한 UI 컴포넌트 시스템을 구축합니다.

**📋 상세 규칙**: `atomic-design.mdc` 파일 참조

### 핵심 원칙

1. **Atoms**: 최소 단위 UI 요소 (badge, button, input)
2. **Molecules**: Atoms 조합 (search_bar, stat_card)
3. **Organisms**: 복잡한 레이아웃 (navbar, footer)

### 필수 준수사항

- 모든 HTML은 기존 components 앱의 atoms/molecules/organisms 사용
- 새로운 컴포넌트는 적절한 계층에 배치
- 직접 HTML 작성 금지, 반드시 include 사용

### 5단계 구조

#### 1. Atoms (기본 구성 요소)

- **위치**: `components/templates/atoms/`
- **정의**: 더 이상 분해할 수 없는 기본 UI 요소
- **예시**: 버튼, 입력 필드, 라벨, 아이콘, 배지
- **규칙**:
  - 단일 책임 원칙 적용
  - Tailwind CSS 클래스 사용
  - daisyUI 컴포넌트 활용
  - 재사용 가능하도록 설계

#### 2. Molecules (분자)

- **위치**: `components/templates/molecules/`
- **정의**: 2개 이상의 Atoms로 구성된 간단한 기능 단위
- **예시**: 검색 폼, 카드 헤더, 네비게이션 아이템
- **규칙**:
  - 단일 기능에 집중
  - Atoms를 조합하여 구성
  - 독립적으로 동작 가능
  - Props를 통한 데이터 전달

#### 3. Organisms (유기체)

- **위치**: `components/templates/organisms/`
- **정의**: 복잡한 UI 섹션을 구성하는 Molecules와 Atoms의 조합
- **예시**: 헤더, 푸터, 사이드바, 메인 콘텐츠 영역
- **규칙**:
  - 페이지의 주요 섹션을 구성
  - 여러 Molecules를 조합
  - 레이아웃과 구조 정의
  - 재사용 가능한 복합 컴포넌트

#### 4. Templates (템플릿)

- **위치**: `templates/`
- **정의**: 페이지의 레이아웃 구조와 콘텐츠 배치
- **예시**: 기본 레이아웃, 대시보드 템플릿, 시뮬레이터 템플릿
- **규칙**:
  - Organisms를 배치하여 레이아웃 구성
  - 실제 콘텐츠 대신 플레이스홀더 사용
  - 반응형 디자인 고려
  - Django 템플릿 상속 활용

#### 5. Pages (페이지)

- **위치**: `templates/pages/`
- **정의**: 실제 콘텐츠가 포함된 최종 페이지
- **예시**: 홈페이지, 시뮬레이터 페이지, 설정 페이지
- **규칙**:
  - Templates에 실제 데이터 주입
  - 사용자 경험 최적화
  - SEO 고려
  - 성능 최적화

### 파일 구조

```
components/
├── templates/
│   ├── atoms/
│   │   ├── button.html
│   │   ├── input.html
│   │   ├── badge.html
│   │   └── icon.html
│   ├── molecules/
│   │   ├── search_bar.html
│   │   ├── stat_card.html
│   │   └── navigation_item.html
│   └── organisms/
│       ├── header.html
│       ├── footer.html
│       └── sidebar.html
templates/
├── base.html
├── pages/
│   ├── home.html
│   ├── simulator.html
│   └── settings.html
└── layouts/
    ├── dashboard.html
    └── simulator_layout.html
```

### 네이밍 규칙

- **Atoms**: 기능명 (예: `button.html`, `input.html`)
- **Molecules**: 기능 + 목적 (예: `search_bar.html`, `stat_card.html`)
- **Organisms**: 영역 + 목적 (예: `header.html`, `sidebar.html`)
- **Templates**: 레이아웃 + 목적 (예: `dashboard_layout.html`)
- **Pages**: 페이지명 (예: `home.html`, `simulator.html`)

### 컴포넌트 개발 규칙

#### 1. 재사용성

- Props를 통한 데이터 전달
- 기본값 설정으로 유연성 확보
- 조건부 렌더링 지원
- CSS 클래스 커스터마이징 가능

#### 2. 일관성

- Tailwind CSS 클래스 순서 통일
- daisyUI 컴포넌트 일관성 유지
- 색상 팔레트 및 타이포그래피 통일
- 간격 및 크기 시스템 일관성

#### 3. 접근성

- ARIA 속성 적절히 사용
- 키보드 네비게이션 지원
- 스크린 리더 호환성
- 색상 대비 충분성

#### 4. 성능

- 불필요한 중첩 최소화
- CSS 클래스 최적화
- 이미지 lazy loading
- 컴포넌트 지연 로딩

### 자동 적용 기능

#### 1. 컴포넌트 생성 시

- Atomic Design 단계별 자동 분류
- 기본 Props 구조 자동 생성
- Tailwind CSS 클래스 자동 적용
- daisyUI 컴포넌트 자동 추천

#### 2. 템플릿 상속

- Django 템플릿 상속 구조 자동 적용
- 블록 구조 자동 생성
- CSS/JS 로딩 최적화
- 메타 태그 자동 설정

#### 3. 반응형 디자인

- 모바일 우선 설계 자동 적용
- 브레이크포인트 자동 설정
- 이미지 반응형 처리
- 터치 인터페이스 최적화

### 품질 보증

#### 1. 컴포넌트 검증

- 단일 책임 원칙 준수 확인
- 재사용성 검증
- 접근성 표준 준수
- 성능 최적화 검증

#### 2. 일관성 검사

- 디자인 시스템 일관성
- 코드 스타일 일관성
- 네이밍 컨벤션 준수
- 파일 구조 규칙 준수

#### 3. 테스트

- 컴포넌트 단위 테스트
- 통합 테스트
- 시각적 회귀 테스트
- 접근성 테스트

---

description: "UmaSimCraft 프로젝트 핵심 코딩 규칙 및 스타일 가이드"
type: Always
globs: ["*"]
alwaysApply: true
autoApply: true

---

# UmaSimCraft 프로젝트 Cursor Rules

## 프로젝트 개요

UmaSimCraft는 우마무스메 프리티 더비의 육성 시뮬레이션을 위한 오프라인 웹 애플리케이션입니다.

## 기술 스택

- **Backend**: Python 3.13, Django 5.2.4 LTS, Django REST Framework, Django Channels 4
- **Database**: MariaDB 11, Redis 7
- **Frontend**: Tailwind CSS 3, daisyUI, PWA
- **DevOps**: Docker, GitHub Actions, pytest

## 자동 적용 규칙

### 1. 코드 스타일

- Python: Black 24.x 포맷팅, Ruff 린팅, 타입 힌트 필수
- Django: ViewSet 패턴, NumPy 스타일 docstring
- Frontend: Tailwind CSS 클래스 순서, daisyUI 컴포넌트
- JavaScript: ES6+ 문법, 모듈화 패턴

### 2. 파일 구조

```
umasimcraft/
├── apps/
│   ├── simulator/     # 시뮬레이션 엔진
│   ├── api/          # DRF API
│   └── realtime/     # WebSocket 처리
├── project/          # Django 설정
├── theme/            # Tailwind CSS 테마
├── static/           # 정적 파일
├── templates/        # Django 템플릿
└── tests/            # 테스트 코드
```

### 3. 네이밍 컨벤션

- 클래스: PascalCase (예: `UmaSimulator`)
- 함수/변수: snake_case (예: `calculate_stats`)
- 상수: UPPER_SNAKE_CASE (예: `MAX_TRAINING_TURNS`)
- 파일명: snake_case (예: `simulation_engine.py`)

### 4. 커밋 메시지

Conventional Commits 형식 사용:

- `feat:` 새로운 기능
- `fix:` 버그 수정
- `docs:` 문서 수정
- `style:` 코드 포맷팅
- `refactor:` 코드 리팩토링
- `test:` 테스트 추가/수정
- `chore:` 빌드 프로세스 또는 보조 도구 변경

### 5. 보안 및 성능

- 민감한 정보는 환경변수 사용
- SQL 인젝션 방지를 위한 ORM 사용
- Redis 캐싱 활용
- 데이터베이스 쿼리 최적화
- 정적 파일 압축 및 CDN 활용

### 6. 테스트

- 단위 테스트 필수 (pytest 사용)
- 통합 테스트 작성
- Channels WebSocket 테스트 포함
- 테스트 커버리지 70% 이상 유지

## 자동 적용 기능

### 1. 코드 생성 시

- 모든 Python 파일에 타입 힌트 자동 추가
- Django 모델에 적절한 Meta 클래스 자동 설정
- ViewSet 패턴 자동 적용
- NumPy 스타일 docstring 자동 작성

### 2. 파일 타입별 자동 적용

- **Python 파일**: Black 포맷팅, Ruff 린팅 규칙
- **Django 템플릿**: Tailwind CSS 클래스 순서, daisyUI 컴포넌트
- **JavaScript**: ES6+ 문법, 모듈화 패턴
- **CSS**: Tailwind 레이어 구조

### 3. 컨텍스트 인식

- 현재 작업 중인 파일 타입에 따라 관련 규칙 자동 적용
- 프로젝트 구조에 맞는 파일 경로 제안
- 기존 코드 패턴과 일관성 유지

## 개발 가이드라인

### 1. Django 개발

- 앱은 apps/ 디렉토리 하위에 배치
- 모델은 composite primary key 활용 (Django 5.2 기능)
- API는 Django REST Framework ViewSet 사용
- 실시간 기능은 Django Channels 4 + Redis 사용

### 2. 프론트엔드 개발

- Tailwind CSS v3 + daisyUI 사용
- django-tailwind CLI로 빌드
- PWA 기능으로 오프라인 지원
- 모바일 우선 반응형 디자인

### 3. 테스트 작성

- pytest 사용
- 단위 테스트, 통합 테스트, 성능 테스트 포함
- 테스트 커버리지 70% 이상 유지
- 보안 테스트 포함

### 4. 배포 및 운영

- Docker 컨테이너화
- GitHub Actions CI/CD
- 환경별 설정 분리
- 모니터링 및 로깅 설정

## 품질 보증

### 1. 자동 검사

- 코드 포맷팅 일관성
- 타입 힌트 완성도
- 테스트 커버리지
- 보안 취약점

### 2. 성능 최적화

- 데이터베이스 쿼리 최적화
- 캐싱 전략 적용
- 정적 파일 최적화
- 번들 크기 최소화

### 3. 보안 강화

- 입력 검증 자동 추가
- SQL 인젝션 방지
- XSS 방지
- CSRF 보호

## 문서화

- README.md는 한글로 작성
- 코드 주석은 영어로 작성
- API 문서는 자동 생성 (DRF)
- 변경사항은 CHANGELOG.md에 기록
